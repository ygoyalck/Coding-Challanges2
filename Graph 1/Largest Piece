int visited[NMAX][NMAX];

int dx[] = {-1,1,0,0};
int dy[] = {0,0,-1,1};

bool isValid(int x, int y, int n) {
  return(x<n && y<n && x>=0 && y>=0);
}

int DFS(char cake[NMAX][NMAX], int n, int x, int y) {
  
  if(visited[x][y])
    return 0;
  
  visited[x][y] = 1;
 
  int counter = 1;
  
  for(int i=0; i<4; i++) {
    
    int newx = x + dx[i];
    int newy = y + dy[i];
    
    if(isValid(newx,newy,n) && cake[newx][newy] == '1')
      counter += DFS(cake, n, newx, newy);
  }
  
  return counter;
}


int solve(int n,char cake[NMAX][NMAX]) {
  int maxi = 0;
  for(int i=0; i<n; i++)
  {
    for(int j=0; j<n; j++)
    {
      if(!visited[i][j] && cake[i][j] == '1')
        maxi = max(maxi, DFS(cake, n, i, j));
    }
  }
  return maxi;
}
