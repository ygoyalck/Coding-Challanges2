#include <bits/stdc++.h>
using namespace std;
vector<int> dfs(int sv, int** edges,int V,bool* visited)
{queue<int> q;
q.push(sv);
 vector<int> v;
  visited[sv]=true;
while(q.size()!=0)
{
  int f=q.front();
q.pop();
  v.push_back(f);
 
  for(int i=0;i<V;i++)
 {
   if(visited[i]==false && edges[f][i]==1)
   {
     q.push(i);
      visited[i]=true;
   }
     
 }
  }
 return v;
  
}
void travelme(int** edges,int V)
{
  bool *visited = new bool[V]; 
    for(int v = 0; v < V; v++) 
        visited[v] = false; 
  
    for (int v=0; v<V; v++) 
    { 
        if (visited[v] == false) 
        { vector<int> w=dfs(v,edges,V,visited); 
  sort(w.begin(),w.end());
         for(int i=0;i<w.size();i++)
         {
           cout<<w[i]<<" ";
         }
            cout << "\n"; 
        } 
    } 
}

int main()
{
  int V, E;
  cin >> V >> E;
int** edges=new int*[V];
  for(int i=0;i<V;i++)
  {
    edges[i]=new int[V];
    
    for(int j=0;j<V;j++)
    {
      edges[i][j]=0;
    }
  }
  int sv,ev;
for(int i=0;i<E;i++)
{
  cin>>sv>>ev;
  edges[sv][ev]=1;
  edges[ev][sv]=1;
}
  
  travelme(edges,V);
  
 
  for(int i=0;i<V;i++)
  {
    delete [] edges[i];
  }
  delete [] edges;
  
  return 0;
}
