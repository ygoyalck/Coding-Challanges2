
bool visited[51][51];

int dx[] = {-1,1,0,0};
int dy[] = {0,0,1,-1};

bool findCycle(char board[][MAXN],int n, int m, int x, int y, int fromX, int fromY, char color) {
  
  if(x>=n || x<0 || y>=m || y<0) return false; // check
  if(board[x][y] != color) return false; // stop if same color isn't found
  
  if(visited[x][y]) {
    return true;
  }
  visited[x][y] = true;
  
  for(int i=0; i<4; i++) {
    
    int newx = x + dx[i];
    int newy = y + dy[i];
    
    if(newx == fromX && newy == fromY) continue; // don't go to same cell again
    return findCycle(board, n, m, newx, newy, x, y, color);   
  }
  
}


int solve(char board[][MAXN],int n, int m)
{
  for(int i=0; i<n; i++)
    for(int j=0; j<m; j++)
      visited[i][j] = false;
  
  bool ans;
  for(int i=0; i<n; i++) {
    for(int j=0; j<m; j++) {
      if(!visited[i][j])
        ans = findCycle(board, n, m, i, j, -1, -1, board[i][j]);
    }
  }
  if(ans == true)
    return 1; 
  else
    return 0;
}
